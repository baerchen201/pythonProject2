# Most of this file was generated by ChatGPT and adapted by me (baer1)
import ctypes

import psutil


def get_screen_size() -> tuple[int, int]:
    # Load the user32.dll library
    user32 = ctypes.windll.user32

    # Get the screen width and height using GetSystemMetrics
    screen_width = user32.GetSystemMetrics(0)  # 0 for width
    screen_height = user32.GetSystemMetrics(1)  # 1 for height

    return screen_width, screen_height


def hide_cursor() -> None:
    # Load the user32.dll library
    user32 = ctypes.windll.user32

    # Call ShowCursor function to hide the cursor
    user32.ShowCursor(False)


def show_cursor() -> None:
    # Load the user32.dll library
    user32 = ctypes.windll.user32

    # Call ShowCursor function to show the cursor
    user32.ShowCursor(True)


def toggle_cursor(on: bool) -> None: return show_cursor() if on else hide_cursor()  # this my code tho. pretty compact:}


def get_taskbar_height():
    # Define necessary constants and structures
    SPI_GETWORKAREA = 48

    class RECT(ctypes.Structure):
        _fields_ = [("left", ctypes.c_long),
                    ("top", ctypes.c_long),
                    ("right", ctypes.c_long),
                    ("bottom", ctypes.c_long)]

    # Get the work area (excluding taskbar) of the primary monitor
    work_area = RECT()
    ctypes.windll.user32.SystemParametersInfoW(
        SPI_GETWORKAREA, 0, ctypes.byref(work_area), 0)

    # Calculate the taskbar height
    taskbar_height = ctypes.windll.user32.GetSystemMetrics(1) - \
                     (work_area.bottom - work_area.top)

    return taskbar_height


def kill_processes_by_name(process_name: str) -> int:
    """Terminate a process by its name."""
    ret = 0
    for proc in psutil.process_iter():
        if proc.name() == process_name:
            proc.kill()
            ret += 1  # Increase kill amount if process was found and killed
    return ret  # Return kill amount


def kill_process(pid: int) -> bool:
    """Terminate a process by its pid."""
    for proc in psutil.process_iter():
        if proc.pid == pid:
            proc.kill()
            return True  # Return true if process was found and killed
    return False  # Return false if process was not found


def is_admin() -> bool:
    try:
        # Check if the current process is running with admin rights on Windows
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    except Exception:
        return False
